---
// src/layouts/BlogPostLayout.astro
export interface Props {
  frontmatter: any;
}

const { frontmatter } = Astro.props;
---

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{frontmatter.title}</title>

  <style>
    :root {
      --bg-primary: #0f0f0f;
      --text-primary: #e0e0e0;
      --text-secondary: #888;
      --text-tertiary: #666;
      --accent: #333;
      --border: #444;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      max-width: 900px;
      margin: 0 auto;
      padding: 2rem;
      line-height: 1.6;
      color: var(--text-primary);
      background: var(--bg-primary);
    }

    .post-header {
      text-align: center;
      margin-bottom: 3rem;
      padding-bottom: 2rem;
      border-bottom: 2px solid var(--border);
    }

    .post-title {
      font-size: 2.5rem;
      margin-bottom: 1rem;
      color: #fff;
      font-weight: 700;
    }

    .post-description {
      color: var(--text-secondary);
      font-size: 1.2rem;
      margin-bottom: 1rem;
      font-style: italic;
    }

    .post-meta {
      color: var(--text-tertiary);
      font-size: 1rem;
    }

    .post-tags {
      display: flex;
      justify-content: center;
      gap: 0.5rem;
      margin-top: 1rem;
      flex-wrap: wrap;
    }

    .tag {
      background: var(--accent);
      color: #fff;
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
      font-size: 0.875rem;
      font-weight: 500;
    }

    .content {
      font-size: 1.125rem;
      line-height: 1.7;
      color: var(--text-primary);
    }

    .content h1, .content h2, .content h3, .content h4 {
      margin-top: 3rem;
      margin-bottom: 1.5rem;
      font-weight: 700;
      color: #fff;
    }

    .content p {
      margin-bottom: 1.5rem;
    }

    /* ---- CALLOUTS (igual que PDF) ---- */
    .callout {
      margin: 1.5rem 0;
      padding: 0;
      border: 1px solid;
      border-radius: 6px;
      overflow: hidden;
      background-color: rgba(var(--callout-bg), 0.15);
      border-color: rgba(var(--callout-border), 0.4);
    }
    .callout-content { padding: 12px 16px; }
    .callout-title {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 10px 16px;
      font-weight: 600;
      background-color: rgba(var(--callout-bg), 0.2);
      border-bottom: 1px solid rgba(var(--callout-border), 0.2);
    }

    /* colores por tipo */
    .callout[data-callout="note"] { --callout-bg: 119, 136, 153; --callout-border: 119, 136, 153; }
    .callout[data-callout="abstract"],
    .callout[data-callout="summary"],
    .callout[data-callout="tldr"] { --callout-bg: 72, 149, 239; --callout-border: 72, 149, 239; }
    .callout[data-callout="info"] { --callout-bg: 0, 176, 255; --callout-border: 0, 176, 255; }
    .callout[data-callout="todo"] { --callout-bg: 64, 156, 255; --callout-border: 64, 156, 255; }
    .callout[data-callout="tip"],
    .callout[data-callout="hint"],
    .callout[data-callout="important"] { --callout-bg: 0, 184, 212; --callout-border: 0, 184, 212; }
    .callout[data-callout="success"],
    .callout[data-callout="check"],
    .callout[data-callout="done"] { --callout-bg: 77, 192, 181; --callout-border: 77, 192, 181; }
    .callout[data-callout="question"],
    .callout[data-callout="help"],
    .callout[data-callout="faq"] { --callout-bg: 100, 122, 203; --callout-border: 100, 122, 203; }
    .callout[data-callout="warning"],
    .callout[data-callout="caution"],
    .callout[data-callout="attention"] { --callout-bg: 255, 145, 0; --callout-border: 255, 145, 0; }
    .callout[data-callout="failure"],
    .callout[data-callout="fail"],
    .callout[data-callout="missing"] { --callout-bg: 255, 82, 82; --callout-border: 255, 82, 82; }
    .callout[data-callout="danger"],
    .callout[data-callout="error"] { --callout-bg: 255, 23, 68; --callout-border: 255, 23, 68; }
    .callout[data-callout="bug"] { --callout-bg: 244, 67, 54; --callout-border: 244, 67, 54; }
    .callout[data-callout="example"] { --callout-bg: 157, 81, 227; --callout-border: 157, 81, 227; }
    .callout[data-callout="quote"],
    .callout[data-callout="cite"] { --callout-bg: 158, 158, 158; --callout-border: 158, 158, 158; }

    /* ---- CÓDIGO ---- */
    pre {
      position: relative;
      background: #1a1a1a;
      border-radius: 8px;
      padding: 1.5rem;
      overflow-x: auto;
      margin: 1.5rem 0;
      border: 1px solid #333;
    }
    code {
      font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
      font-size: 0.9em;
    }
    pre code {
      color: #e0e0e0;
      display: block;
    }

    /* ---- BOTÓN COPIAR ---- */
    .code-copy-btn {
      position: absolute;
      top: 8px;
      right: 8px;
      background: #333;
      border: 1px solid #555;
      border-radius: 4px;
      padding: 4px 8px;
      color: #ccc;
      font-size: 0.8rem;
      cursor: pointer;
      opacity: 0;
      transition: opacity 0.2s ease;
    }
    pre:hover .code-copy-btn { opacity: 1; }
    .code-copy-btn:hover { background: #444; color: #fff; }

    /* ---- RESALTADOS / KBD ---- */
    mark {
      background: linear-gradient(120deg, #facc15 0%, #fbbf24 50%, #facc15 100%);
      color: #000;
      padding: 2px 4px;
      border-radius: 4px;
      font-weight: 600;
    }
    kbd {
      background: #333;
      border: 1px solid #555;
      border-bottom: 2px solid #777;
      border-radius: 4px;
      padding: 2px 6px;
      font-family: 'SF Mono', 'Monaco', monospace;
      font-size: 0.9em;
      font-weight: 500;
      color: #e0e0e0;
      box-shadow: 0 1px 3px rgba(0,0,0,.5);
    }

    /* ---- RESPONSIVE ---- */
    @media (max-width: 768px) {
      body { padding: 1rem; }
      .post-title { font-size: 2rem; }
      .content { font-size: 1rem; }
      .callout-title, .callout-content { padding: 10px 12px; }
    }
  </style>
</head>

<body>
  <header class="post-header">
    <h1 class="post-title">{frontmatter.title}</h1>

    {frontmatter.description && (
      <p class="post-description">{frontmatter.description}</p>
    )}

    <div class="post-meta">
      {frontmatter.pubDate && (
        <time>
          {new Date(frontmatter.pubDate).toLocaleDateString('es-ES', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </time>
      )}
    </div>

    {frontmatter.tags && frontmatter.tags.length > 0 && (
      <div class="post-tags">
        {frontmatter.tags.map((tag: string) => (
          <span class="tag">{tag}</span>
        ))}
      </div>
    )}
  </header>

  <main class="content">
    <slot />
  </main>

  <!-- ―――――――――――――  JS  ――――――――――――― -->
  <script>
    /* ----------  Copiar código  ---------- */
    function addCopyButtons() {
      document.querySelectorAll('pre').forEach(pre => {
        if (pre.querySelector('.code-copy-btn')) return;
        const btn = document.createElement('button');
        btn.textContent = 'Copiar';
        btn.className = 'code-copy-btn';
        pre.appendChild(btn);
        btn.onclick = () => {
          const code = pre.querySelector('code')?.textContent || pre.textContent;
          navigator.clipboard.writeText(code).then(() => {
            btn.textContent = '¡Copiado!';
            setTimeout(() => btn.textContent = 'Copiar', 2000);
          }).catch(() => {
            btn.textContent = 'Error';
          });
        };
      });
    }

    /* ----------  Callouts Obsidian  ---------- */
    function processCallouts() {
      document.querySelectorAll('.content blockquote').forEach(bq => {
        const firstP = bq.querySelector('p:first-child');
        if (!firstP) return;
        const txt = firstP.textContent || '';
        const m = txt.match(/\[\!([^\]]+)\]\s*(.*)/);
        if (!m) return;

        const type = m[1].toLowerCase();
        const title = m[2].trim() || type;

        const callout = document.createElement('div');
        callout.className = 'callout';
        callout.setAttribute('data-callout', type);

        const titleDiv = document.createElement('div');
        titleDiv.className = 'callout-title';
        titleDiv.textContent = title;

        const contentDiv = document.createElement('div');
        contentDiv.className = 'callout-content';
        Array.from(bq.querySelectorAll('p:not(:first-child)')).forEach(p =>
          contentDiv.appendChild(p.cloneNode(true))
        );

        callout.append(titleDiv, contentDiv);
        bq.replaceWith(callout);
      });
    }

    /* ----------  ===highlight===  &  `kbd`  ---------- */
    function processTextEnhancements() {
      const walker = document.createTreeWalker(
        document.querySelector('.content'),
        NodeFilter.SHOW_TEXT,
        null
      );
      const nodes = [];
      let n;
      while ((n = walker.nextNode())) {
        if (!n.parentElement) continue;
        if (n.parentElement.closest('pre, code')) continue;
        nodes.push(n);
      }
      nodes.forEach(node => {
        const text = node.textContent ?? '';
        // Replace ===highlight=== with <mark> and `kbd` with <kbd> using DOM manipulation
        const fragments = [];
        let lastIndex = 0;
        const regex = /(===([^=]+)===|`([^`]+)`)/g;
        let match;
        while ((match = regex.exec(text)) !== null) {
          if (match.index > lastIndex) {
            fragments.push(document.createTextNode(text.slice(lastIndex, match.index)));
          }
          if (match[2]) {
            const mark = document.createElement('mark');
            mark.textContent = match[2];
            fragments.push(mark);
          } else if (match[3]) {
            const kbd = document.createElement('kbd');
            kbd.textContent = match[3];
            fragments.push(kbd);
          }
          lastIndex = regex.lastIndex;
        }
        if (lastIndex < text.length) {
          fragments.push(document.createTextNode(text.slice(lastIndex)));
        }
        if (fragments.length > 0 && node.parentNode) {
          const span = document.createElement('span');
          fragments.forEach(frag => span.appendChild(frag));
          node.parentNode.replaceChild(span, node);
        }
      });
    }

    /* ----------  Ejecutar todo al cargar  ---------- */
    document.addEventListener('DOMContentLoaded', () => {
      processCallouts();
      processTextEnhancements();
      addCopyButtons();
    });
  </script>
</body>
</html>