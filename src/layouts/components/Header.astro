---
import HeaderLink from './HeaderLink.astro';
import { Image } from 'astro:assets';
import AvaLogo from '@src/assets/img/small-ava.jpg';
import GithubWhite from '@src/assets/img/github-mark-white.svg';
import GithubBlack from '@src/assets/img/github-mark.svg';

const menu = [
  {
		link: '/about/',
		label: 'About'
	},
	{
		link: '/posts/',
		label: 'Posts'
	},
	{
		link: '/projects/',
		label: 'Projects'
	},
	{
		link: '/tags/',
		label: 'Tags'
	},
];
---

<header
	id='site-header'
	class:list={[
		'flex items-center w-full transition duration-300 z-[999] border-[var(--soft-border-color)]'
	]}
>
	<div class='container'>
		<nav class='flex gap-4 items-center justify-between py-3'>
			<h2 class='m-0'>
				<a href='/' class='flex gap-4 items-center text-xl font-black uppercase'>
					<!-- You can use your site logo, rounded ava or simply your site name here-->
          <Image src={AvaLogo} alt='Your site name' class="rounded-full w-11 border-white border-2 shadow-lg"/> 
					<!-- {SITE_TITLE} -->
				</a>
			</h2>
			<div class='flex'>
				<!-- Google Translate Widget (oculto) -->
				<div id="google_translate_element" class="hidden"></div>
				
				<!-- Botón de traducción personalizado -->
				<button class='p-3' id='translateToggle' aria-label='Toggle translation' title='Traducir / Translate'>
					<!-- Icono de traducción -->
					<svg id="translateIcon" class='translate-icon' xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
						<path d="M7 3h10v2H7zM4 7h16v2H4zM7 13h10v2H7zM4 17h16v2H4z"></path>
						<path d="M12 6v12M9 9l3-3 3 3"></path>
					</svg>
					<!-- Icono de revertir (inicialmente oculto) -->
					<svg id="revertIcon" class='revert-icon hidden' xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
						<path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"></path>
						<path d="M3 3v5h5"></path>
					</svg>
				</button>
				
				<a class='p-3 dark:hidden' href='https://github.com/devaradise/devolio' target='_blank'
					><Image src={GithubBlack} width={24} height={24} alt='Github logo' /></a
				>
				<a class='p-3 hidden dark:block' href='https://github.com/devaradise/devolio' target='_blank'
					><Image src={GithubWhite} width={24} height={24} alt='Github logo' /></a
				>
				<button class='p-3' id='themeToggle' aria-label='Theme mode'>
					<svg
						class='sun'
						xmlns='http://www.w3.org/2000/svg'
						width='24'
						height='24'
						viewBox='0 0 24 24'
						fill='none'
						stroke='currentColor'
						stroke-width='2'
						stroke-linecap='round'
						stroke-linejoin='round'
						class='lucide lucide-sun'
						><circle cx='12' cy='12' r='4'></circle><path d='M12 2v2'></path><path d='M12 20v2'></path><path d='m4.93 4.93 1.41 1.41'
						></path><path d='m17.66 17.66 1.41 1.41'></path><path d='M2 12h2'></path><path d='M20 12h2'></path><path
							d='m6.34 17.66-1.41 1.41'></path><path d='m19.07 4.93-1.41 1.41'></path></svg
					>
					<svg
						class='moon'
						xmlns='http://www.w3.org/2000/svg'
						width='24'
						height='24'
						viewBox='0 0 24 24'
						fill='none'
						stroke='currentColor'
						stroke-width='2'
						stroke-linecap='round'
						stroke-linejoin='round'
						class='lucide lucide-moon'
					>
						<path d='M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z'></path></svg
					>
				</button>
			</div>
		</nav>
    <div class='fixed top-3 w-auto max-w-full px-3 left-1/2 -translate-x-1/2 z-[999]'>
      <div class="flex px-2.5 bg-white/90 dark:bg-zinc-900/75 backdrop-blur-md leading-tight rounded-full border dark:border-zinc-700">
        <div class="px-2.5 text-sm">
          <HeaderLink class="py-3 flex items-center" href="/" aria-label="Home">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.7" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-house"><path d="M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8"/><path d="M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/></svg>
          </HeaderLink>
        </div>
        {
          menu.map((item, index) => (
            <>
              <!-- Separador antes de cada elemento del menú -->
              <div class="flex items-center">
                <span class="text-current opacity-30">|</span>
              </div>
              <div class='px-2.5 text-sm'>
                <HeaderLink class="py-3 flex items-center" href={item.link}>
                  {item.label}
                </HeaderLink>
              </div>
            </>
          ))
        }
      </div>
    </div>
	</div>

	<style is:global>
		#themeToggle .moon {
			display: none;
		}
		.dark #themeToggle .sun {
			display: none;
		}
		.dark #themeToggle .moon {
			display: block;
		}

		/* Estilos para Google Translate */
		.goog-te-banner-frame.skiptranslate {
			display: none !important;
		}
		
		body {
			top: 0px !important;
		}
		
		.goog-te-gadget-icon {
			display: none !important;
		}
		
		.goog-te-gadget-simple {
			background-color: transparent !important;
			border: none !important;
			font-size: 12px !important;
		}

		/* Animación para el botón de traducción */
		#translateToggle {
			transition: all 0.3s ease;
		}

		#translateToggle:hover {
			transform: scale(1.1);
		}

		.translate-icon, .revert-icon {
			transition: opacity 0.3s ease;
		}

		/* Indicador visual cuando está traducido */
		.translated #translateIcon {
			color: #10b981; /* green-500 */
		}

		.translated .revert-icon {
			color: #ef4444; /* red-500 */
		}
	</style>

	<script is:inline>
		// Variables globales para la traducción
		let isTranslated = false;
		let currentLanguage = 'es'; // Idioma original de tu sitio
		let userLanguage = '';

		// Función requerida por Google Translate
		function googleTranslateElementInit() {
			new google.translate.TranslateElement({
				pageLanguage: currentLanguage,
				includedLanguages: 'en,fr,de,it,pt,ru,zh,ja,ko,ar',
				autoDisplay: false,
				layout: google.translate.TranslateElement.InlineLayout.SIMPLE
			}, 'google_translate_element');
			
			setTimeout(initializeTranslation, 1000);
		}

		// Inicializar la traducción automática
		function initializeTranslation() {
			// Detectar idioma del navegador
			userLanguage = (navigator.language || navigator.userLanguage).substr(0, 2);
			
			// Si el idioma del usuario es diferente al original, traducir automáticamente
			if (userLanguage !== currentLanguage) {
				translateToLanguage(userLanguage);
			}
		}

		// Función para traducir a un idioma específico
		function translateToLanguage(langCode) {
			const selectElement = document.querySelector('.goog-te-combo');
			if (selectElement) {
				// Buscar la opción del idioma
				const options = selectElement.options;
				for (let i = 0; i < options.length; i++) {
					if (options[i].value.includes(langCode)) {
						selectElement.selectedIndex = i;
						selectElement.dispatchEvent(new Event('change'));
						
						// Actualizar estado
						isTranslated = true;
						updateTranslateButton();
						
						break;
					}
				}
			}
		}

		// Función para revertir al idioma original
		function revertToOriginal() {
			const selectElement = document.querySelector('.goog-te-combo');
			if (selectElement) {
				selectElement.selectedIndex = 0; // Primera opción es siempre el idioma original
				selectElement.dispatchEvent(new Event('change'));
				
				// Actualizar estado
				isTranslated = false;
				updateTranslateButton();
			}
		}

		// Actualizar la apariencia del botón
		function updateTranslateButton() {
			const translateIcon = document.getElementById('translateIcon');
			const revertIcon = document.getElementById('revertIcon');
			const translateButton = document.getElementById('translateToggle');

			if (isTranslated) {
				translateIcon.classList.add('hidden');
				revertIcon.classList.remove('hidden');
				translateButton.classList.add('translated');
				translateButton.title = 'Volver al idioma original / Back to original';
			} else {
				translateIcon.classList.remove('hidden');
				revertIcon.classList.add('hidden');
				translateButton.classList.remove('translated');
				translateButton.title = 'Traducir / Translate';
			}
		}

		// Manejar clic en el botón de traducción
		function handleTranslateClick() {
			if (isTranslated) {
				revertToOriginal();
			} else {
				// Si no está traducido, traducir al idioma del navegador
				if (userLanguage && userLanguage !== currentLanguage) {
					translateToLanguage(userLanguage);
				} else {
					// Si el idioma del navegador es el mismo que el original, traducir a inglés por defecto
					translateToLanguage('en');
				}
			}
		}

		// Tema toggle (código original)
		const theme = (() => {
			if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
				return 'dark';
			}
			if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
				return localStorage.getItem('theme');
			}
			return 'light';
		})();

		if (theme === 'light') {
			document.documentElement.classList.remove('dark');
		} else {
			document.documentElement.classList.add('dark');
		}

		window.localStorage.setItem('theme', theme || '');

		function sendMessage(message) {
			const iframe = document.querySelector('iframe.giscus-frame');
			if (!iframe) return;
			iframe.contentWindow.postMessage({ giscus: message }, 'https://giscus.app');
		}

		const handleToggleClick = () => {
			const element = document.documentElement;
			element.classList.toggle('dark');

			const isDark = element.classList.contains('dark');
			if (isDark) {
				sendMessage({
					setConfig: {
						theme: 'dark_dimmed'
					}
				});
			} else {
				sendMessage({
					setConfig: {
						theme: 'light'
					}
				});
			}
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		};

		// Event listeners
		document.addEventListener('DOMContentLoaded', () => {
			document.getElementById('themeToggle')?.addEventListener('click', handleToggleClick);
			document.getElementById('translateToggle')?.addEventListener('click', handleTranslateClick);
		});
	</script>

	<!-- Cargar Google Translate -->
	<script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
</header>