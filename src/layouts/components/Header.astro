---
import HeaderLink from './HeaderLink.astro';
import { Image } from 'astro:assets';
import AvaLogo from '@src/assets/img/small-ava.jpg';
import GithubWhite from '@src/assets/img/github-mark-white.svg';
import GithubBlack from '@src/assets/img/github-mark.svg';

const menu = [
  {
		link: '/about/',
		label: 'Info'
	},
	{
		link: '/posts/',
		label: 'Posts'
	},
	{
		link: '/projects/',
		label: 'Links'
	},
	{
		link: '/tags/',
		label: 'Tags'
	},
];
---

<header
	id='site-header'
	class:list={[
		'flex items-center w-full transition duration-300 z-[999] border-[var(--soft-border-color)]'
	]}
>
	<div class='container'>
		<nav class='flex gap-4 items-center justify-between py-3'>
			<h2 class='m-0'>
				<a href='/' class='flex gap-4 items-center text-xl font-black uppercase'>
					<!-- You can use your site logo, rounded ava or simply your site name here-->
          <Image src={AvaLogo} alt='Your site name' class="rounded-full w-11 border-white border-2 shadow-lg"/> 
					<!-- {SITE_TITLE} -->
				</a>
			</h2>
			<div class='flex items-center'>
				<!-- Google Translate Widget (oculto) -->
				<div id="google_translate_element" class="hidden"></div>
				
				<!-- Selector de idioma personalizado -->
				<div class="relative" id="languageSelector">
					<button class='p-3 flex items-center gap-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md transition-colors' id='languageToggle' aria-label='Select language'>
						<span id="currentLanguage" class="text-sm font-semibold">ESP</span>
						<svg class="w-4 h-4 transition-transform" id="languageArrow" xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
							<path d="m6 9 6 6 6-6"/>
						</svg>
					</button>
					
					<!-- Lista desplegable de idiomas -->
					<div id="languageDropdown" class="absolute top-full right-0 mt-1 bg-white dark:bg-zinc-900 border dark:border-zinc-700 rounded-lg shadow-lg min-w-[120px] z-[1000] hidden">
						<div class="py-1">
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="" data-label="ESP">
								<span>Español</span>
								<span class="text-xs opacity-60">ESP</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="en" data-label="ENG">
								<span>English</span>
								<span class="text-xs opacity-60">ENG</span>
							</button>
						</div>
					</div>
				</div>
				
				<a class='p-3 dark:hidden' href='https://github.com/devaradise/devolio' target='_blank'
					><Image src={GithubBlack} width={24} height={24} alt='Github logo' /></a
				>
				<a class='p-3 hidden dark:block' href='https://github.com/devaradise/devolio' target='_blank'
					><Image src={GithubWhite} width={24} height={24} alt='Github logo' /></a
				>
				<button class='p-3' id='themeToggle' aria-label='Theme mode'>
					<svg
						class='sun'
						xmlns='http://www.w3.org/2000/svg'
						width='24'
						height='24'
						viewBox='0 0 24 24'
						fill='none'
						stroke='currentColor'
						stroke-width='2'
						stroke-linecap='round'
						stroke-linejoin='round'
						class='lucide lucide-sun'
						><circle cx='12' cy='12' r='4'></circle><path d='M12 2v2'></path><path d='M12 20v2'></path><path d='m4.93 4.93 1.41 1.41'
						></path><path d='m17.66 17.66 1.41 1.41'></path><path d='M2 12h2'></path><path d='M20 12h2'></path><path
							d='m6.34 17.66-1.41 1.41'></path><path d='m19.07 4.93-1.41 1.41'></path></svg
					>
					<svg
						class='moon'
						xmlns='http://www.w3.org/2000/svg'
						width='24'
						height='24'
						viewBox='0 0 24 24'
						fill='none'
						stroke='currentColor'
						stroke-width='2'
						stroke-linecap='round'
						stroke-linejoin='round'
						class='lucide lucide-moon'
					>
						<path d='M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z'></path></svg
					>
				</button>
			</div>
		</nav>
    <div class='fixed top-3 w-auto max-w-full px-3 left-1/2 -translate-x-1/2 z-[999]' id='navigation-menu'>
      <div class="flex px-2.5 bg-white/90 dark:bg-zinc-900/75 backdrop-blur-md leading-tight rounded-full border dark:border-zinc-700">
        <div class="px-2.5 text-sm">
          <HeaderLink class="py-3 flex items-center" href="/" aria-label="Home">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.7" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-house"><path d="M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8"/><path d="M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/></svg>
          </HeaderLink>
        </div>
        {
          menu.map((item, index) => (
            <>
              <!-- Separador antes de cada elemento del menú -->
              <div class="flex items-center">
                <span class="text-current opacity-30">|</span>
              </div>
              <div class='px-2.5 text-sm'>
                <HeaderLink class="py-3 flex items-center" href={item.link}>
                  {item.label}
                </HeaderLink>
              </div>
            </>
          ))
        }
      </div>
    </div>
	</div>

	<style is:global>
		#themeToggle .moon {
			display: none;
		}
		.dark #themeToggle .sun {
			display: none;
		}
		.dark #themeToggle .moon {
			display: block;
		}

		/* Estilos para Google Translate */
		.goog-te-banner-frame.skiptranslate {
			display: none !important;
		}
		
		body {
			top: 0px !important;
		}
		
		.goog-te-gadget-icon {
			display: none !important;
		}
		
		.goog-te-gadget-simple {
			background-color: transparent !important;
			border: none !important;
			font-size: 12px !important;
		}

		/* Forzar visibilidad del menú de navegación */
		#navigation-menu {
			display: block !important;
			visibility: visible !important;
			opacity: 1 !important;
		}

		/* Estilos para el selector de idioma */
		#languageDropdown {
			animation: slideDown 0.15s ease-out;
		}

		#languageDropdown.hidden {
			animation: slideUp 0.15s ease-out;
		}

		@keyframes slideDown {
			from {
				opacity: 0;
				transform: translateY(-5px);
			}
			to {
				opacity: 1;
				transform: translateY(0);
			}
		}

		@keyframes slideUp {
			from {
				opacity: 1;
				transform: translateY(0);
			}
			to {
				opacity: 0;
				transform: translateY(-5px);
			}
		}

		.language-option.active {
			background-color: #3b82f6;
			color: white;
		}

		.language-option.active:hover {
			background-color: #2563eb;
		}

		#languageArrow.rotate {
			transform: rotate(180deg);
		}

		/* Precarga para optimización */
		.goog-te-combo {
			visibility: hidden;
			position: absolute;
		}
	</style>

	<script is:inline>
		// Variables globales optimizadas
		let googleTranslateLoaded = false;
		let currentLang = '';
		let translateElement = null;
		let isChangingLanguage = false;

		// Mapa de códigos de idioma (solo inglés y español)
		const languageMap = {
			'': 'ESP',
			'en': 'ENG'
		};

		// Función requerida por Google Translate (optimizada)
		function googleTranslateElementInit() {
			try {
				translateElement = new google.translate.TranslateElement({
					pageLanguage: 'es',
					includedLanguages: 'en', // Solo inglés
					autoDisplay: false,
					layout: google.translate.TranslateElement.InlineLayout.SIMPLE
				}, 'google_translate_element');
				
				// Optimización: reducir tiempo de espera
				setTimeout(() => {
					googleTranslateLoaded = true;
					console.log('Google Translate cargado');
					initializeTranslation();
				}, 800); // Reducido de 2000ms a 800ms
				
			} catch (error) {
				console.error('Error inicializando Google Translate:', error);
			}
		}

		// Función de inicialización optimizada
		function initializeTranslation() {
			detectCurrentLanguage();
			setupLanguageObserver();
			preloadTranslateSelector();
		}

		// Precargar selector para mejor rendimiento
		function preloadTranslateSelector() {
			const checkSelector = (attempts = 0) => {
				const selector = document.querySelector('.goog-te-combo');
				if (selector || attempts > 10) return;
				setTimeout(() => checkSelector(attempts + 1), 100);
			};
			checkSelector();
		}

		// Detectar idioma actual optimizado
		function detectCurrentLanguage() {
			try {
				// Método rápido: desde URL
				const url = window.location.href;
				if (url.includes('#googtrans(')) {
					const match = url.match(/#googtrans\(es\|([^)]+)\)/);
					if (match && match[1] && languageMap[match[1]]) {
						const detectedLang = match[1];
						updateLanguageUI(detectedLang, languageMap[detectedLang]);
						currentLang = detectedLang;
						return;
					}
				}

				// Método desde selector
				const selectElement = document.querySelector('.goog-te-combo');
				if (selectElement?.value) {
					const langCode = selectElement.value.includes('|') 
						? selectElement.value.split('|')[1] 
						: '';
					if (languageMap[langCode]) {
						updateLanguageUI(langCode, languageMap[langCode]);
						currentLang = langCode;
						return;
					}
				}

				// Por defecto: español
				updateLanguageUI('', 'ESP');
				currentLang = '';
				
			} catch (error) {
				console.log('Error detectando idioma:', error);
				updateLanguageUI('', 'ESP');
			}
		}

		// Observer optimizado
		function setupLanguageObserver() {
			let lastUrl = location.href;
			
			// Observer de URL más eficiente
			const urlObserver = new MutationObserver(() => {
				const url = location.href;
				if (url !== lastUrl) {
					lastUrl = url;
					setTimeout(detectCurrentLanguage, 300); // Reducido de 500ms
				}
			});
			
			urlObserver.observe(document, { 
				subtree: true, 
				childList: true 
			});

			// Observer para selector con debounce
			let selectorTimeout;
			const selectorObserver = new MutationObserver(() => {
				clearTimeout(selectorTimeout);
				selectorTimeout = setTimeout(() => {
					const selectElement = document.querySelector('.goog-te-combo');
					if (selectElement && !selectElement.hasAttribute('data-observed')) {
						selectElement.setAttribute('data-observed', 'true');
						selectElement.addEventListener('change', () => {
							setTimeout(detectCurrentLanguage, 200);
						});
					}
				}, 100);
			});

			selectorObserver.observe(document.body, {
				childList: true,
				subtree: true
			});
		}

		// Función optimizada para cambiar idioma
		function changeLanguage(langCode, langLabel) {
			if (isChangingLanguage) return;
			isChangingLanguage = true;

			try {
				// Español (original)
				if (langCode === '') {
					window.location.hash = '';
					window.location.reload();
					return;
				}

				// Otros idiomas - método optimizado
				const changeWithSelector = (attempts = 0) => {
					const selector = document.querySelector('.goog-te-combo');
					
					if (!selector && attempts < 15) {
						setTimeout(() => changeWithSelector(attempts + 1), 150); // Reducido de 250ms
						return;
					}

					if (!selector) {
						// Fallback rápido
						window.location.hash = `googtrans(es|${langCode})`;
						setTimeout(() => window.location.reload(), 100);
						return;
					}

					// Seleccionar idioma
					for (let i = 0; i < selector.options.length; i++) {
						const value = selector.options[i].value;
						if (value.includes(`|${langCode}`)) {
							selector.selectedIndex = i;
							selector.dispatchEvent(new Event('change', { bubbles: true }));
							updateLanguageUI(langCode, langLabel);
							currentLang = langCode;
							break;
						}
					}
				};

				changeWithSelector();

			} catch (error) {
				console.error('Error cambiando idioma:', error);
			} finally {
				setTimeout(() => { isChangingLanguage = false; }, 1000); // Reducido de 3000ms
			}
		}

		// Función optimizada para actualizar UI
		function updateLanguageUI(langCode, langLabel) {
			const currentLanguageSpan = document.getElementById('currentLanguage');
			if (currentLanguageSpan) {
				currentLanguageSpan.textContent = langLabel;
			}

			// Batch update para mejor rendimiento
			requestAnimationFrame(() => {
				const options = document.querySelectorAll('.language-option');
				options.forEach(option => {
					option.classList.toggle('active', option.dataset.lang === langCode);
				});
			});

			// Persistencia optimizada
			try {
				if (typeof localStorage !== 'undefined') {
					localStorage.setItem('selectedLanguage', JSON.stringify({
						code: langCode,
						label: langLabel
					}));
				}
			} catch (e) {}
		}

		// Cargar idioma guardado optimizado
		function loadSavedLanguage() {
			try {
				if (typeof localStorage !== 'undefined') {
					const saved = localStorage.getItem('selectedLanguage');
					if (saved) {
						const { code, label } = JSON.parse(saved);
						if (languageMap[code]) { // Verificar que el idioma esté disponible
							updateLanguageUI(code, label);
							currentLang = code;
						}
					}
				}
			} catch (error) {
				console.log('Error cargando idioma guardado:', error);
			}
		}

		// Toggle optimizado del dropdown
		function toggleLanguageDropdown() {
			const dropdown = document.getElementById('languageDropdown');
			const arrow = document.getElementById('languageArrow');
			
			if (dropdown && arrow) {
				const isHidden = dropdown.classList.contains('hidden');
				dropdown.classList.toggle('hidden', !isHidden);
				arrow.classList.toggle('rotate', isHidden);
			}
		}

		// Cerrar dropdown optimizado
		function closeDropdownOnClickOutside(event) {
			const selector = document.getElementById('languageSelector');
			if (selector && !selector.contains(event.target)) {
				const dropdown = document.getElementById('languageDropdown');
				const arrow = document.getElementById('languageArrow');
				if (dropdown && arrow) {
					dropdown.classList.add('hidden');
					arrow.classList.remove('rotate');
				}
			}
		}

		// Tema toggle (código original optimizado)
		const theme = (() => {
			if (typeof localStorage !== 'undefined') {
				const saved = localStorage.getItem('theme');
				if (saved) return saved;
			}
			return window.matchMedia?.('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
		})();

		document.documentElement.classList.toggle('dark', theme === 'dark');
		if (typeof localStorage !== 'undefined') {
			localStorage.setItem('theme', theme);
		}

		function sendMessage(message) {
			const iframe = document.querySelector('iframe.giscus-frame');
			iframe?.contentWindow?.postMessage({ giscus: message }, 'https://giscus.app');
		}

		const handleToggleClick = () => {
			document.documentElement.classList.toggle('dark');
			const isDark = document.documentElement.classList.contains('dark');
			
			sendMessage({
				setConfig: { theme: isDark ? 'dark_dimmed' : 'light' }
			});
			
			if (typeof localStorage !== 'undefined') {
				localStorage.setItem('theme', isDark ? 'dark' : 'light');
			}
		};

		// Event listeners optimizados
		document.addEventListener('DOMContentLoaded', () => {
			loadSavedLanguage();

			// Theme toggle
			const themeToggle = document.getElementById('themeToggle');
			themeToggle?.addEventListener('click', handleToggleClick);
			
			// Language selector
			const languageToggle = document.getElementById('languageToggle');
			languageToggle?.addEventListener('click', toggleLanguageDropdown);
			
			// Language options con delegación de eventos
			document.addEventListener('click', (e) => {
				if (e.target.closest('.language-option')) {
					e.preventDefault();
					e.stopPropagation();
					
					const option = e.target.closest('.language-option');
					const langCode = option.dataset.lang;
					const langLabel = option.dataset.label;
					
					// Cerrar dropdown
					const dropdown = document.getElementById('languageDropdown');
					const arrow = document.getElementById('languageArrow');
					if (dropdown && arrow) {
						dropdown.classList.add('hidden');
						arrow.classList.remove('rotate');
					}
					
					// Cambiar idioma con micro delay
					setTimeout(() => changeLanguage(langCode, langLabel), 50);
				}
			});

			// Cerrar dropdown al hacer clic fuera
			document.addEventListener('click', closeDropdownOnClickOutside);
		});

		// Optimización: cargar detección solo cuando esté listo
		window.addEventListener('load', () => {
			setTimeout(detectCurrentLanguage, 500); // Reducido de 1000ms
		});
	</script>

	<!-- Cargar Google Translate de forma optimizada -->
	<script type="text/javascript" 
		src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"
		async>
	</script>
</header>