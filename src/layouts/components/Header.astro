---
import HeaderLink from './HeaderLink.astro';
import { Image } from 'astro:assets';
import AvaLogo from '@src/assets/img/small-ava.jpg';
import GithubWhite from '@src/assets/img/github-mark-white.svg';
import GithubBlack from '@src/assets/img/github-mark.svg';

const menu = [
  {
		link: '/about/',
		label: 'About'
	},
	{
		link: '/posts/',
		label: 'Posts'
	},
	{
		link: '/projects/',
		label: 'Projects'
	},
	{
		link: '/tags/',
		label: 'Tags'
	},
];
---

<header
	id='site-header'
	class:list={[
		'flex items-center w-full transition duration-300 z-[999] border-[var(--soft-border-color)]'
	]}
>
	<div class='container'>
		<nav class='flex gap-4 items-center justify-between py-3'>
			<h2 class='m-0'>
				<a href='/' class='flex gap-4 items-center text-xl font-black uppercase'>
					<!-- You can use your site logo, rounded ava or simply your site name here-->
          <Image src={AvaLogo} alt='Your site name' class="rounded-full w-11 border-white border-2 shadow-lg"/> 
					<!-- {SITE_TITLE} -->
				</a>
			</h2>
			<div class='flex items-center'>
				<!-- Google Translate Widget (oculto) -->
				<div id="google_translate_element" class="hidden"></div>
				
				<!-- Selector de idioma personalizado -->
				<div class="relative" id="languageSelector">
					<button class='p-3 flex items-center gap-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md transition-colors' id='languageToggle' aria-label='Select language'>
						<span id="currentLanguage" class="text-sm font-semibold">ESP</span>
						<svg class="w-4 h-4 transition-transform" id="languageArrow" xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
							<path d="m6 9 6 6 6-6"/>
						</svg>
					</button>
					
					<!-- Lista desplegable de idiomas -->
					<div id="languageDropdown" class="absolute top-full right-0 mt-1 bg-white dark:bg-zinc-900 border dark:border-zinc-700 rounded-lg shadow-lg min-w-[120px] z-[1000] hidden">
						<div class="py-1">
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="" data-label="ESP">
								<span>Español</span>
								<span class="text-xs opacity-60">ESP</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="en" data-label="ENG">
								<span>English</span>
								<span class="text-xs opacity-60">ENG</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="fr" data-label="FRA">
								<span>Français</span>
								<span class="text-xs opacity-60">FRA</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="de" data-label="DEU">
								<span>Deutsch</span>
								<span class="text-xs opacity-60">DEU</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="it" data-label="ITA">
								<span>Italiano</span>
								<span class="text-xs opacity-60">ITA</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="pt" data-label="POR">
								<span>Português</span>
								<span class="text-xs opacity-60">POR</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="ru" data-label="RUS">
								<span>Русский</span>
								<span class="text-xs opacity-60">RUS</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="zh" data-label="CHN">
								<span>中文</span>
								<span class="text-xs opacity-60">CHN</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="ja" data-label="JPN">
								<span>日本語</span>
								<span class="text-xs opacity-60">JPN</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="ko" data-label="KOR">
								<span>한국어</span>
								<span class="text-xs opacity-60">KOR</span>
							</button>
						</div>
					</div>
				</div>
				
				<a class='p-3 dark:hidden' href='https://github.com/devaradise/devolio' target='_blank'
					><Image src={GithubBlack} width={24} height={24} alt='Github logo' /></a
				>
				<a class='p-3 hidden dark:block' href='https://github.com/devaradise/devolio' target='_blank'
					><Image src={GithubWhite} width={24} height={24} alt='Github logo' /></a
				>
				<button class='p-3' id='themeToggle' aria-label='Theme mode'>
					<svg
						class='sun'
						xmlns='http://www.w3.org/2000/svg'
						width='24'
						height='24'
						viewBox='0 0 24 24'
						fill='none'
						stroke='currentColor'
						stroke-width='2'
						stroke-linecap='round'
						stroke-linejoin='round'
						class='lucide lucide-sun'
						><circle cx='12' cy='12' r='4'></circle><path d='M12 2v2'></path><path d='M12 20v2'></path><path d='m4.93 4.93 1.41 1.41'
						></path><path d='m17.66 17.66 1.41 1.41'></path><path d='M2 12h2'></path><path d='M20 12h2'></path><path
							d='m6.34 17.66-1.41 1.41'></path><path d='m19.07 4.93-1.41 1.41'></path></svg
					>
					<svg
						class='moon'
						xmlns='http://www.w3.org/2000/svg'
						width='24'
						height='24'
						viewBox='0 0 24 24'
						fill='none'
						stroke='currentColor'
						stroke-width='2'
						stroke-linecap='round'
						stroke-linejoin='round'
						class='lucide lucide-moon'
					>
						<path d='M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z'></path></svg
					>
				</button>
			</div>
		</nav>
    <div class='fixed top-3 w-auto max-w-full px-3 left-1/2 -translate-x-1/2 z-[999]' id='navigation-menu'>
      <div class="flex px-2.5 bg-white/90 dark:bg-zinc-900/75 backdrop-blur-md leading-tight rounded-full border dark:border-zinc-700">
        <div class="px-2.5 text-sm">
          <HeaderLink class="py-3 flex items-center" href="/" aria-label="Home">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.7" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-house"><path d="M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8"/><path d="M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/></svg>
          </HeaderLink>
        </div>
        {
          menu.map((item, index) => (
            <>
              <!-- Separador antes de cada elemento del menú -->
              <div class="flex items-center">
                <span class="text-current opacity-30">|</span>
              </div>
              <div class='px-2.5 text-sm'>
                <HeaderLink class="py-3 flex items-center" href={item.link}>
                  {item.label}
                </HeaderLink>
              </div>
            </>
          ))
        }
      </div>
    </div>
	</div>

	<style is:global>
		#themeToggle .moon {
			display: none;
		}
		.dark #themeToggle .sun {
			display: none;
		}
		.dark #themeToggle .moon {
			display: block;
		}

		/* Estilos para Google Translate - Ocultar TODA la interfaz */
		.goog-te-banner-frame.skiptranslate,
		.goog-te-banner-frame,
		.goog-te-ftab-frame.skiptranslate,
		.goog-te-ftab-frame,
		.goog-te-balloon-frame,
		.goog-te-menu-frame.skiptranslate,
		.goog-te-menu-frame {
			display: none !important;
			visibility: hidden !important;
			opacity: 0 !important;
			position: absolute !important;
			left: -9999px !important;
			top: -9999px !important;
			width: 0 !important;
			height: 0 !important;
			overflow: hidden !important;
		}
		
		/* Ocultar completamente cualquier frame de Google Translate */
		iframe[src*="translate.google"]:not([src*="element.js"]) {
			display: none !important;
			visibility: hidden !important;
			position: absolute !important;
			left: -9999px !important;
			top: -9999px !important;
			width: 0 !important;
			height: 0 !important;
		}

		/* Ocultar la barra superior de traducción */
		.goog-te-banner-frame {
			display: none !important;
		}

		/* Forzar que el body mantenga su posición original */
		body {
			top: 0px !important;
			position: static !important;
			margin-top: 0 !important;
		}

		/* Ocultar elementos de la interfaz de Google Translate */
		.goog-te-gadget-icon,
		.goog-te-gadget-simple,
		.goog-te-menu-value,
		.goog-te-gadget {
			display: none !important;
			visibility: hidden !important;
		}

		/* Forzar visibilidad del menú de navegación */
		#navigation-menu {
			display: block !important;
			visibility: visible !important;
			opacity: 1 !important;
		}

		/* Acelerar transiciones CSS para hacer la traducción más rápida */
		* {
			transition-duration: 0.1s !important;
		}

		/* Optimización para elementos traducidos */
		font[style*="vertical-align: inherit"] {
			transition: none !important;
			animation: none !important;
		}

		/* Estilos para el selector de idioma */
		#languageDropdown {
			animation: slideDown 0.2s ease-out;
		}

		#languageDropdown.hidden {
			animation: slideUp 0.2s ease-out;
		}

		@keyframes slideDown {
			from {
				opacity: 0;
				transform: translateY(-10px);
			}
			to {
				opacity: 1;
				transform: translateY(0);
			}
		}

		@keyframes slideUp {
			from {
				opacity: 1;
				transform: translateY(0);
			}
			to {
				opacity: 0;
				transform: translateY(-10px);
			}
		}

		.language-option.active {
			background-color: #3b82f6;
			color: white;
		}

		.language-option.active:hover {
			background-color: #2563eb;
		}

		#languageArrow.rotate {
			transform: rotate(180deg);
		}
	</style>

	<script is:inline>
		// Variables globales
		let googleTranslateLoaded = false;
		let currentLang = '';
		let languageObserver = null;

		// Mapa de códigos de idioma a etiquetas
		const languageMap = {
			'': 'ESP',
			'en': 'ENG', 
			'fr': 'FRA',
			'de': 'DEU',
			'it': 'ITA',
			'pt': 'POR',
			'ru': 'RUS',
			'zh': 'CHN',
			'ja': 'JPN',
			'ko': 'KOR'
		};

		// Función requerida por Google Translate
		function googleTranslateElementInit() {
			new google.translate.TranslateElement({
				pageLanguage: 'es',
				includedLanguages: 'en,fr,de,it,pt,ru,zh,ja,ko',
				autoDisplay: false,
				layout: google.translate.TranslateElement.InlineLayout.SIMPLE,
				multilanguagePage: true,
				gaTrack: false,
				gaId: null
			}, 'google_translate_element');
			
			// Ocultar inmediatamente cualquier elemento de Google Translate UI
			hideGoogleTranslateUI();
			
			// Esperar a que se cargue completamente
			setTimeout(() => {
				googleTranslateLoaded = true;
				console.log('Google Translate cargado');
				hideGoogleTranslateUI();
				detectCurrentLanguage();
				startLanguageObserver();
				
				// Configurar interceptor para acelerar traducciones
				setupFastTranslation();
			}, 1500);
		}

		// Función para ocultar completamente la UI de Google Translate
		function hideGoogleTranslateUI() {
			// Ocultar elementos existentes
			const elementsToHide = [
				'.goog-te-banner-frame',
				'.goog-te-ftab-frame', 
				'.goog-te-balloon-frame',
				'.goog-te-menu-frame',
				'.skiptranslate',
				'iframe[src*="translate.google"]',
				'.goog-te-gadget',
				'.goog-te-combo'
			];

			elementsToHide.forEach(selector => {
				const elements = document.querySelectorAll(selector);
				elements.forEach(el => {
					if (el && !el.closest('#google_translate_element')) {
						el.style.display = 'none';
						el.style.visibility = 'hidden';
						el.style.opacity = '0';
						el.style.position = 'absolute';
						el.style.left = '-9999px';
						el.style.top = '-9999px';
						el.style.width = '0';
						el.style.height = '0';
						el.remove();
					}
				});
			});

			// Remover la clase skiptranslate del body si existe
			document.body.classList.remove('skiptranslate');

			// Asegurar que el body mantenga su posición
			document.body.style.top = '0px';
			document.body.style.position = 'static';
			document.body.style.marginTop = '0px';
		}

		// Configurar traducción más rápida
		function setupFastTranslation() {
			// Interceptar y acelerar el proceso de traducción
			const originalSetTimeout = window.setTimeout;
			window.setTimeout = function(fn, delay, ...args) {
				// Reducir delays relacionados con Google Translate
				if (delay > 100 && (fn.toString().includes('translate') || fn.toString().includes('goog'))) {
					delay = Math.min(delay, 200);
				}
				return originalSetTimeout.call(this, fn, delay, ...args);
			};

			// Observer para ocultar UI inmediatamente cuando aparezca
			const observer = new MutationObserver((mutations) => {
				mutations.forEach((mutation) => {
					mutation.addedNodes.forEach((node) => {
						if (node.nodeType === Node.ELEMENT_NODE) {
							// Verificar si es un elemento de Google Translate UI
							if (node.classList && (
								node.classList.contains('goog-te-banner-frame') ||
								node.classList.contains('goog-te-ftab-frame') ||
								node.classList.contains('skiptranslate') ||
								node.tagName === 'IFRAME' && node.src && node.src.includes('translate.google')
							)) {
								node.remove();
							}

							// También verificar elementos hijos
							const unwantedElements = node.querySelectorAll && node.querySelectorAll('.goog-te-banner-frame, .goog-te-ftab-frame, .skiptranslate, iframe[src*="translate.google"]');
							if (unwantedElements) {
								unwantedElements.forEach(el => el.remove());
							}
						}
					});
				});
			});

			observer.observe(document.body, {
				childList: true,
				subtree: true
			});
		}

		// Detectar el idioma actual desde la URL o selector
		function detectCurrentLanguage() {
			try {
				// Método 1: Detectar desde la URL
				const url = window.location.href;
				const urlParams = new URLSearchParams(window.location.search);
				
				// Buscar parámetro de Google Translate en la URL
				if (url.includes('#googtrans(')) {
					const match = url.match(/#googtrans\(es\|([^)]+)\)/);
					if (match && match[1]) {
						const detectedLang = match[1];
						console.log('Idioma detectado desde URL:', detectedLang);
						updateLanguageUI(detectedLang, languageMap[detectedLang] || detectedLang.toUpperCase());
						currentLang = detectedLang;
						return;
					}
				}

				// Método 2: Detectar desde el selector de Google Translate
				const selectElement = document.querySelector('.goog-te-combo');
				if (selectElement && selectElement.value) {
					const selectedValue = selectElement.value;
					const langCode = selectedValue.includes('|') ? selectedValue.split('|')[1] : '';
					console.log('Idioma detectado desde selector:', langCode);
					updateLanguageUI(langCode, languageMap[langCode] || 'ESP');
					currentLang = langCode;
					return;
				}

				// Método 3: Detectar cambios en el DOM
				const translatedElements = document.querySelectorAll('font[style*="vertical-align: inherit"]');
				if (translatedElements.length > 0) {
					console.log('Traducción detectada en el DOM');
					// Si hay elementos traducidos pero no podemos detectar el idioma específico,
					// mantener el último idioma seleccionado
					if (currentLang && currentLang !== '') {
						updateLanguageUI(currentLang, languageMap[currentLang]);
					}
				} else {
					// No hay traducción, volver a español
					updateLanguageUI('', 'ESP');
					currentLang = '';
				}
			} catch (error) {
				console.log('Error detectando idioma:', error);
				// En caso de error, mantener español como predeterminado
				updateLanguageUI('', 'ESP');
			}
		}

		// Observer para detectar cambios en el idioma
		function startLanguageObserver() {
			// Observer para cambios en la URL
			let lastUrl = location.href;
			new MutationObserver(() => {
				const url = location.href;
				if (url !== lastUrl) {
					lastUrl = url;
					setTimeout(detectCurrentLanguage, 500);
				}
			}).observe(document, { subtree: true, childList: true });

			// Observer para cambios en el selector de Google Translate
			const observer = new MutationObserver((mutations) => {
				mutations.forEach((mutation) => {
					if (mutation.type === 'childList') {
						const selectElement = document.querySelector('.goog-te-combo');
						if (selectElement && !selectElement.hasAttribute('data-observed')) {
							selectElement.setAttribute('data-observed', 'true');
							selectElement.addEventListener('change', () => {
								setTimeout(detectCurrentLanguage, 500);
							});
						}
					}
				});
			});

			observer.observe(document.body, {
				childList: true,
				subtree: true
			});

			// Verificar periódicamente el estado del idioma
			setInterval(detectCurrentLanguage, 3000);
		}

		// Función para cambiar idioma (optimizada para velocidad)
		function changeLanguage(langCode, langLabel) {
			console.log('Cambiando idioma a:', langCode, langLabel);

			// Prevenir cambios múltiples rápidos
			if (window.changingLanguage) {
				console.log('Ya hay un cambio de idioma en progreso');
				return;
			}
			window.changingLanguage = true;

			// Ocultar UI de Google Translate inmediatamente
			hideGoogleTranslateUI();

			try {
				// Si es idioma original (español)
				if (langCode === '') {
					// Limpiar cualquier traducción
					const url = new URL(window.location);
					url.hash = '';
					url.search = '';
					window.history.replaceState({}, '', url.toString());
					
					// Método más rápido para volver al original
					const translateElements = document.querySelectorAll('font[style*="vertical-align: inherit"]');
					if (translateElements.length > 0) {
						window.location.reload();
					} else {
						updateLanguageUI(langCode, langLabel);
						currentLang = langCode;
						window.changingLanguage = false;
					}
					return;
				}

				// Para otros idiomas, usar método optimizado
				function findAndChangeLanguageFast(attempts = 0) {
					const selectElement = document.querySelector('.goog-te-combo');
					
					if (!selectElement && attempts < 15) {
						setTimeout(() => findAndChangeLanguageFast(attempts + 1), 100);
						return;
					}

					if (!selectElement) {
						console.log('Usando método directo de URL');
						// Método directo más rápido
						const currentUrl = window.location.href.split('#')[0].split('?')[0];
						window.location.href = currentUrl + `#googtrans(es|${langCode})`;
						
						// Forzar recarga si es necesario
						setTimeout(() => {
							if (!document.querySelector('font[style*="vertical-align: inherit"]')) {
								window.location.reload();
							}
						}, 1000);
						
						updateLanguageUI(langCode, langLabel);
						currentLang = langCode;
						window.changingLanguage = false;
						return;
					}

					// Buscar y seleccionar el idioma rápidamente
					let found = false;
					const options = selectElement.options;
					
					for (let i = 0; i < options.length; i++) {
						const value = options[i].value;
						if (value.includes(`|${langCode}`) || value === langCode) {
							selectElement.selectedIndex = i;
							found = true;
							break;
						}
					}

					if (!found) {
						// Fallback a método de URL
						window.location.hash = `googtrans(es|${langCode})`;
						setTimeout(() => window.location.reload(), 500);
						window.changingLanguage = false;
						return;
					}

					// Disparar múltiples eventos para asegurar el cambio rápido
					const events = ['change', 'click', 'input', 'mousedown', 'mouseup'];
					events.forEach(eventType => {
						const event = new Event(eventType, { bubbles: true });
						selectElement.dispatchEvent(event);
					});

					// Actualizar UI inmediatamente
					updateLanguageUI(langCode, langLabel);
					currentLang = langCode;

					// Verificar y acelerar traducción
					setTimeout(() => {
						hideGoogleTranslateUI();
						
						// Si no se ha traducido en 2 segundos, forzar recarga
						setTimeout(() => {
							if (!document.querySelector('font[style*="vertical-align: inherit"]')) {
								console.log('Forzando recarga para completar traducción');
								window.location.reload();
							}
						}, 2000);
					}, 500);

					console.log('Cambio de idioma iniciado (modo rápido)');
				}

				findAndChangeLanguageFast();

			} catch (error) {
				console.error('Error cambiando idioma:', error);
			} finally {
				// Liberar el bloqueo después de menos tiempo
				setTimeout(() => {
					window.changingLanguage = false;
					hideGoogleTranslateUI();
				}, 2000);
			}
		}

		// Actualizar la interfaz del selector
		function updateLanguageUI(langCode, langLabel) {
			const currentLanguageSpan = document.getElementById('currentLanguage');
			if (currentLanguageSpan) {
				currentLanguageSpan.textContent = langLabel;
			}

			// Actualizar estado activo en las opciones
			const options = document.querySelectorAll('.language-option');
			options.forEach(option => {
				if (option.dataset.lang === langCode) {
					option.classList.add('active');
				} else {
					option.classList.remove('active');
				}
			});

			// Guardar el idioma actual en localStorage para persistencia
			if (typeof localStorage !== 'undefined') {
				localStorage.setItem('selectedLanguage', JSON.stringify({
					code: langCode,
					label: langLabel
				}));
			}
		}

		// Cargar idioma guardado al iniciar
		function loadSavedLanguage() {
			try {
				if (typeof localStorage !== 'undefined') {
					const saved = localStorage.getItem('selectedLanguage');
					if (saved) {
						const { code, label } = JSON.parse(saved);
						updateLanguageUI(code, label);
						currentLang = code;
					}
				}
			} catch (error) {
				console.log('Error cargando idioma guardado:', error);
			}
		}

		// Toggle del dropdown
		function toggleLanguageDropdown() {
			const dropdown = document.getElementById('languageDropdown');
			const arrow = document.getElementById('languageArrow');
			
			if (dropdown && arrow) {
				if (dropdown.classList.contains('hidden')) {
					dropdown.classList.remove('hidden');
					arrow.classList.add('rotate');
				} else {
					dropdown.classList.add('hidden');
					arrow.classList.remove('rotate');
				}
			}
		}

		// Cerrar dropdown al hacer clic fuera
		function closeDropdownOnClickOutside(event) {
			const selector = document.getElementById('languageSelector');
			const dropdown = document.getElementById('languageDropdown');
			const arrow = document.getElementById('languageArrow');

			if (selector && dropdown && arrow && !selector.contains(event.target)) {
				dropdown.classList.add('hidden');
				arrow.classList.remove('rotate');
			}
		}

		// Forzar visibilidad del menú de navegación
		function ensureNavigationVisibility() {
			const navMenu = document.getElementById('navigation-menu');
			if (navMenu) {
				navMenu.style.display = 'block';
				navMenu.style.visibility = 'visible';
				navMenu.style.opacity = '1';
			}
		}

		// Tema toggle (código original)
		const theme = (() => {
			if (typeof window !== 'undefined' && window.matchMedia('(prefers-color-scheme: dark)').matches) {
				return 'dark';
			}
			if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
				return localStorage.getItem('theme');
			}
			return 'light';
		})();

		if (theme === 'light') {
			document.documentElement.classList.remove('dark');
		} else {
			document.documentElement.classList.add('dark');
		}

		if (typeof window !== 'undefined' && typeof localStorage !== 'undefined') {
			localStorage.setItem('theme', theme);
		}

		function sendMessage(message) {
			const iframe = document.querySelector('iframe.giscus-frame');
			if (!iframe) return;
			iframe.contentWindow.postMessage({ giscus: message }, 'https://giscus.app');
		}

		const handleToggleClick = () => {
			const element = document.documentElement;
			element.classList.toggle('dark');

			const isDark = element.classList.contains('dark');
			if (isDark) {
				sendMessage({
					setConfig: {
						theme: 'dark_dimmed'
					}
				});
			} else {
				sendMessage({
					setConfig: {
						theme: 'light'
					}
				});
			}
			
			if (typeof localStorage !== 'undefined') {
				localStorage.setItem('theme', isDark ? 'dark' : 'light');
			}
		};

		// Event listeners
		document.addEventListener('DOMContentLoaded', () => {
			console.log('DOM cargado, inicializando...');

			// Ocultar UI de Google Translate inmediatamente
			hideGoogleTranslateUI();

			// Cargar idioma guardado
			loadSavedLanguage();

			// Theme toggle
			const themeToggle = document.getElementById('themeToggle');
			if (themeToggle) {
				themeToggle.addEventListener('click', handleToggleClick);
			}
			
			// Language selector toggle
			const languageToggle = document.getElementById('languageToggle');
			if (languageToggle) {
				languageToggle.addEventListener('click', toggleLanguageDropdown);
			}
			
			// Language options
			document.querySelectorAll('.language-option').forEach(option => {
				option.addEventListener('click', (e) => {
					e.preventDefault();
					e.stopPropagation();
					
					const langCode = option.dataset.lang;
					const langLabel = option.dataset.label;
					
					console.log('Opción de idioma clickeada:', langCode, langLabel);
					
					// Cerrar dropdown primero
					const dropdown = document.getElementById('languageDropdown');
					const arrow = document.getElementById('languageArrow');
					if (dropdown && arrow) {
						dropdown.classList.add('hidden');
						arrow.classList.remove('rotate');
					}
					
					// Cambiar idioma inmediatamente
					changeLanguage(langCode, langLabel);
				});
			});

			// Cerrar dropdown al hacer clic fuera
			document.addEventListener('click', closeDropdownOnClickOutside);

			// Asegurar visibilidad del menú
			ensureNavigationVisibility();
			
			// Verificar visibilidad del menú más frecuentemente
			setInterval(() => {
				ensureNavigationVisibility();
				hideGoogleTranslateUI();
			}, 1000);
		});

		// Detectar cuando la página esté completamente cargada
		window.addEventListener('load', () => {
			setTimeout(() => {
				hideGoogleTranslateUI();
				detectCurrentLanguage();
				ensureNavigationVisibility();
			}, 500);
		});

		// Ocultar UI de Google Translate continuamente
		setInterval(hideGoogleTranslateUI, 2000);

		// Limpiar el bloqueo de cambio de idioma si la página se recarga
		window.addEventListener('beforeunload', () => {
			window.changingLanguage = false;
		});

		// Interceptar y prevenir la aparición de elementos de Google Translate
		document.addEventListener('DOMNodeInserted', function(e) {
			if (e.target.classList && (
				e.target.classList.contains('goog-te-banner-frame') ||
				e.target.classList.contains('goog-te-ftab-frame') ||
				e.target.classList.contains('skiptranslate')
			)) {
				e.target.remove();
			}
		});
	</script>

	<!-- Cargar Google Translate -->
	<script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
</header>