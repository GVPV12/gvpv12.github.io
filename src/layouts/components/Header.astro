---
import HeaderLink from './HeaderLink.astro';
import { Image } from 'astro:assets';
import AvaLogo from '@src/assets/img/small-ava.jpg';
import GithubWhite from '@src/assets/img/github-mark-white.svg';
import GithubBlack from '@src/assets/img/github-mark.svg';

const menu = [
  {
		link: '/about/',
		label: 'About'
	},
	{
		link: '/posts/',
		label: 'Posts'
	},
	{
		link: '/projects/',
		label: 'Projects'
	},
	{
		link: '/tags/',
		label: 'Tags'
	},
];
---

<header
	id='site-header'
	class:list={[
		'flex items-center w-full transition duration-300 z-[999] border-[var(--soft-border-color)]'
	]}
>
	<div class='container'>
		<nav class='flex gap-4 items-center justify-between py-3'>
			<h2 class='m-0'>
				<a href='/' class='flex gap-4 items-center text-xl font-black uppercase'>
					<!-- You can use your site logo, rounded ava or simply your site name here-->
          <Image src={AvaLogo} alt='Your site name' class="rounded-full w-11 border-white border-2 shadow-lg"/> 
					<!-- {SITE_TITLE} -->
				</a>
			</h2>
			<div class='flex items-center'>
				<!-- Google Translate Widget (completamente oculto) -->
				<div id="google_translate_element" style="display: none !important;"></div>
				
				<!-- Selector de idioma personalizado -->
				<div class="relative" id="languageSelector">
					<button class='p-3 flex items-center gap-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md transition-colors' id='languageToggle' aria-label='Select language'>
						<span id="currentLanguage" class="text-sm font-semibold">ESP</span>
						<svg class="w-4 h-4 transition-transform" id="languageArrow" xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
							<path d="m6 9 6 6 6-6"/>
						</svg>
					</button>
					
					<!-- Lista desplegable de idiomas -->
					<div id="languageDropdown" class="absolute top-full right-0 mt-1 bg-white dark:bg-zinc-900 border dark:border-zinc-700 rounded-lg shadow-lg min-w-[120px] z-[1000] hidden">
						<div class="py-1">
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between active" data-lang="" data-label="ESP">
								<span>Español</span>
								<span class="text-xs opacity-60">ESP</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="en" data-label="ENG">
								<span>English</span>
								<span class="text-xs opacity-60">ENG</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="fr" data-label="FRA">
								<span>Français</span>
								<span class="text-xs opacity-60">FRA</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="de" data-label="DEU">
								<span>Deutsch</span>
								<span class="text-xs opacity-60">DEU</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="it" data-label="ITA">
								<span>Italiano</span>
								<span class="text-xs opacity-60">ITA</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="pt" data-label="POR">
								<span>Português</span>
								<span class="text-xs opacity-60">POR</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="ru" data-label="RUS">
								<span>Русский</span>
								<span class="text-xs opacity-60">RUS</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="zh" data-label="CHN">
								<span>中文</span>
								<span class="text-xs opacity-60">CHN</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="ja" data-label="JPN">
								<span>日本語</span>
								<span class="text-xs opacity-60">JPN</span>
							</button>
							<button class="language-option w-full px-4 py-2 text-sm text-left hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center justify-between" data-lang="ko" data-label="KOR">
								<span>한국어</span>
								<span class="text-xs opacity-60">KOR</span>
							</button>
						</div>
					</div>
				</div>
				
				<a class='p-3 dark:hidden' href='https://github.com/devaradise/devolio' target='_blank'
					><Image src={GithubBlack} width={24} height={24} alt='Github logo' /></a
				>
				<a class='p-3 hidden dark:block' href='https://github.com/devaradise/devolio' target='_blank'
					><Image src={GithubWhite} width={24} height={24} alt='Github logo' /></a
				>
				<button class='p-3' id='themeToggle' aria-label='Theme mode'>
					<svg
						class='sun'
						xmlns='http://www.w3.org/2000/svg'
						width='24'
						height='24'
						viewBox='0 0 24 24'
						fill='none'
						stroke='currentColor'
						stroke-width='2'
						stroke-linecap='round'
						stroke-linejoin='round'
						class='lucide lucide-sun'
						><circle cx='12' cy='12' r='4'></circle><path d='M12 2v2'></path><path d='M12 20v2'></path><path d='m4.93 4.93 1.41 1.41'
						></path><path d='m17.66 17.66 1.41 1.41'></path><path d='M2 12h2'></path><path d='M20 12h2'></path><path
							d='m6.34 17.66-1.41 1.41'></path><path d='m19.07 4.93-1.41 1.41'></path></svg
					>
					<svg
						class='moon'
						xmlns='http://www.w3.org/2000/svg'
						width='24'
						height='24'
						viewBox='0 0 24 24'
						fill='none'
						stroke='currentColor'
						stroke-width='2'
						stroke-linecap='round'
						stroke-linejoin='round'
						class='lucide lucide-moon'
					>
						<path d='M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z'></path></svg
					>
				</button>
			</div>
		</nav>
    <div class='fixed top-3 w-auto max-w-full px-3 left-1/2 -translate-x-1/2 z-[999]'>
      <div class="flex px-2.5 bg-white/90 dark:bg-zinc-900/75 backdrop-blur-md leading-tight rounded-full border dark:border-zinc-700">
        <div class="px-2.5 text-sm">
          <HeaderLink class="py-3 flex items-center" href="/" aria-label="Home">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.7" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-house"><path d="M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8"/><path d="M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/></svg>
          </HeaderLink>
        </div>
        {
          menu.map((item, index) => (
            <>
              <!-- Separador antes de cada elemento del menú -->
              <div class="flex items-center">
                <span class="text-current opacity-30">|</span>
              </div>
              <div class='px-2.5 text-sm'>
                <HeaderLink class="py-3 flex items-center" href={item.link}>
                  {item.label}
                </HeaderLink>
              </div>
            </>
          ))
        }
      </div>
    </div>
	</div>

	<style is:global>
		#themeToggle .moon {
			display: none;
		}
		.dark #themeToggle .sun {
			display: none;
		}
		.dark #themeToggle .moon {
			display: block;
		}

		/* Ocultar completamente Google Translate y sus efectos */
		.goog-te-banner-frame.skiptranslate {
			display: none !important;
		}
		
		body {
			top: 0px !important;
		}
		
		.goog-te-gadget-icon {
			display: none !important;
		}
		
		.goog-te-gadget-simple {
			display: none !important;
		}

		.goog-te-gadget {
			display: none !important;
		}

		.goog-te-combo {
			display: none !important;
		}

		#google_translate_element {
			display: none !important;
			visibility: hidden !important;
			position: absolute !important;
			left: -9999px !important;
		}

		#google_translate_element * {
			display: none !important;
		}

		/* Proteger el header de modificaciones */
		#site-header {
			position: relative !important;
			z-index: 9999 !important;
		}

		#site-header * {
			position: relative !important;
		}

		/* Estilos para el selector de idioma */
		#languageDropdown {
			animation: slideDown 0.2s ease-out;
		}

		#languageDropdown.hidden {
			animation: slideUp 0.2s ease-out;
		}

		@keyframes slideDown {
			from {
				opacity: 0;
				transform: translateY(-10px);
			}
			to {
				opacity: 1;
				transform: translateY(0);
			}
		}

		@keyframes slideUp {
			from {
				opacity: 1;
				transform: translateY(0);
			}
			to {
				opacity: 0;
				transform: translateY(-10px);
			}
		}

		.language-option.active {
			background-color: #3b82f6 !important;
			color: white !important;
		}

		.language-option.active:hover {
			background-color: #2563eb !important;
		}

		#languageArrow.rotate {
			transform: rotate(180deg);
		}

		/* Asegurar que el contenido translated no afecte el header */
		body.translated-ltr #site-header,
		body.translated-rtl #site-header {
			position: relative !important;
			z-index: 9999 !important;
		}
	</style>

	<script is:inline>
		// Variables globales
		let googleTranslateReady = false;
		let currentLang = '';
		let translateWidget = null;
		let isChangingLanguage = false;

		// Función requerida por Google Translate
		function googleTranslateElementInit() {
			try {
				translateWidget = new google.translate.TranslateElement({
					pageLanguage: 'es',
					includedLanguages: 'en,fr,de,it,pt,ru,zh,ja,ko',
					autoDisplay: false,
					layout: google.translate.TranslateElement.InlineLayout.SIMPLE
				}, 'google_translate_element');
				
				console.log('Google Translate inicializado');
				
				// Esperar a que se cargue completamente
				setTimeout(() => {
					googleTranslateReady = true;
					console.log('Google Translate listo');
					
					// Ocultar cualquier elemento visible de Google Translate
					hideGoogleTranslateElements();
				}, 2000);

			} catch (error) {
				console.error('Error inicializando Google Translate:', error);
			}
		}

		// Función para ocultar elementos de Google Translate
		function hideGoogleTranslateElements() {
			const elements = [
				'.goog-te-banner-frame',
				'.goog-te-gadget',
				'.goog-te-gadget-simple',
				'.goog-te-combo',
				'#google_translate_element',
				'.goog-te-gadget-icon'
			];

			elements.forEach(selector => {
				const els = document.querySelectorAll(selector);
				els.forEach(el => {
					el.style.display = 'none';
					el.style.visibility = 'hidden';
					el.style.position = 'absolute';
					el.style.left = '-9999px';
				});
			});
		}

		// Función mejorada para cambiar idioma
		function changeLanguage(langCode, langLabel) {
			if (isChangingLanguage) {
				console.log('Ya se está cambiando el idioma, esperando...');
				return;
			}

			isChangingLanguage = true;
			console.log('Cambiando idioma a:', langCode, langLabel);
			
			// Actualizar UI inmediatamente
			updateLanguageUI(langCode, langLabel);
			currentLang = langCode;

			if (!googleTranslateReady) {
				console.log('Google Translate no está listo, reintentando...');
				setTimeout(() => {
					isChangingLanguage = false;
					changeLanguage(langCode, langLabel);
				}, 1000);
				return;
			}

			try {
				// Si es español (idioma original)
				if (langCode === '') {
					console.log('Restaurando idioma original');
					// Recargar la página para volver al español
					window.location.reload();
					return;
				}

				// Buscar el selector de Google Translate
				const selector = document.querySelector('.goog-te-combo');
				
				if (!selector) {
					console.log('Selector de Google Translate no encontrado');
					isChangingLanguage = false;
					return;
				}

				// Buscar la opción del idioma
				let targetOption = null;
				for (let i = 0; i < selector.options.length; i++) {
					const option = selector.options[i];
					if (option.value.includes(langCode)) {
						targetOption = option;
						break;
					}
				}

				if (!targetOption) {
					console.log('Idioma no encontrado en las opciones');
					isChangingLanguage = false;
					return;
				}

				// Cambiar el valor y disparar eventos
				selector.value = targetOption.value;
				
				// Disparar eventos
				const changeEvent = new Event('change', { bubbles: true });
				selector.dispatchEvent(changeEvent);
				
				// También disparar click en la opción
				targetOption.selected = true;
				const clickEvent = new Event('click', { bubbles: true });
				targetOption.dispatchEvent(clickEvent);

				console.log('Idioma cambiado exitosamente');

				// Ocultar elementos de Google Translate después del cambio
				setTimeout(() => {
					hideGoogleTranslateElements();
					isChangingLanguage = false;
				}, 1000);

			} catch (error) {
				console.error('Error cambiando idioma:', error);
				isChangingLanguage = false;
			}
		}

		// Actualizar la interfaz del selector
		function updateLanguageUI(langCode, langLabel) {
			const currentLanguageSpan = document.getElementById('currentLanguage');
			if (currentLanguageSpan) {
				currentLanguageSpan.textContent = langLabel;
			}

			// Actualizar estado activo en las opciones
			const options = document.querySelectorAll('.language-option');
			options.forEach(option => {
				if (option.dataset.lang === langCode) {
					option.classList.add('active');
				} else {
					option.classList.remove('active');
				}
			});
		}

		// Toggle del dropdown
		function toggleLanguageDropdown() {
			const dropdown = document.getElementById('languageDropdown');
			const arrow = document.getElementById('languageArrow');
			
			if (dropdown && arrow) {
				if (dropdown.classList.contains('hidden')) {
					dropdown.classList.remove('hidden');
					arrow.classList.add('rotate');
				} else {
					dropdown.classList.add('hidden');
					arrow.classList.remove('rotate');
				}
			}
		}

		// Cerrar dropdown al hacer clic fuera
		function closeDropdownOnClickOutside(event) {
			const selector = document.getElementById('languageSelector');
			const dropdown = document.getElementById('languageDropdown');
			const arrow = document.getElementById('languageArrow');

			if (selector && dropdown && arrow && !selector.contains(event.target)) {
				dropdown.classList.add('hidden');
				arrow.classList.remove('rotate');
			}
		}

		// Detectar cambios en el idioma de la página
		function observeLanguageChanges() {
			const observer = new MutationObserver(() => {
				hideGoogleTranslateElements();
			});

			observer.observe(document.body, {
				childList: true,
				subtree: true,
				attributes: true,
				attributeFilter: ['class', 'style']
			});
		}

		// Tema toggle (código original)
		const theme = (() => {
			if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
				return 'dark';
			}
			if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
				return localStorage.getItem('theme');
			}
			return 'light';
		})();

		if (theme === 'light') {
			document.documentElement.classList.remove('dark');
		} else {
			document.documentElement.classList.add('dark');
		}

		if (typeof localStorage !== 'undefined') {
			window.localStorage.setItem('theme', theme || '');
		}

		function sendMessage(message) {
			const iframe = document.querySelector('iframe.giscus-frame');
			if (!iframe) return;
			iframe.contentWindow.postMessage({ giscus: message }, 'https://giscus.app');
		}

		const handleToggleClick = () => {
			const element = document.documentElement;
			element.classList.toggle('dark');

			const isDark = element.classList.contains('dark');
			if (isDark) {
				sendMessage({
					setConfig: {
						theme: 'dark_dimmed'
					}
				});
			} else {
				sendMessage({
					setConfig: {
						theme: 'light'
					}
				});
			}
			if (typeof localStorage !== 'undefined') {
				localStorage.setItem('theme', isDark ? 'dark' : 'light');
			}
		};

		// Event listeners
		document.addEventListener('DOMContentLoaded', () => {
			console.log('DOM cargado, inicializando componentes...');
			
			// Theme toggle
			const themeToggle = document.getElementById('themeToggle');
			if (themeToggle) {
				themeToggle.addEventListener('click', handleToggleClick);
			}
			
			// Language selector toggle
			const languageToggle = document.getElementById('languageToggle');
			if (languageToggle) {
				languageToggle.addEventListener('click', toggleLanguageDropdown);
			}
			
			// Language options
			document.querySelectorAll('.language-option').forEach(option => {
				option.addEventListener('click', (e) => {
					e.preventDefault();
					const langCode = option.dataset.lang;
					const langLabel = option.dataset.label;
					
					// Cerrar dropdown
					const dropdown = document.getElementById('languageDropdown');
					const arrow = document.getElementById('languageArrow');
					if (dropdown && arrow) {
						dropdown.classList.add('hidden');
						arrow.classList.remove('rotate');
					}
					
					// Cambiar idioma con un pequeño delay
					setTimeout(() => {
						changeLanguage(langCode, langLabel);
					}, 100);
				});
			});

			// Cerrar dropdown al hacer clic fuera
			document.addEventListener('click', closeDropdownOnClickOutside);

			// Inicializar UI
			updateLanguageUI('', 'ESP');
			
			// Observar cambios para ocultar elementos de Google Translate
			observeLanguageChanges();
			
			console.log('Componentes inicializados');
		});

		// Ocultar elementos de Google Translate periódicamente
		setInterval(() => {
			hideGoogleTranslateElements();
		}, 2000);
	</script>

	<!-- Cargar Google Translate de forma asíncrona -->
	<script>
		// Cargar Google Translate de forma más controlada
		(function() {
			const script = document.createElement('script');
			script.type = 'text/javascript';
			script.src = '//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit';
			script.async = true;
			script.defer = true;
			
			script.onerror = function() {
				console.error('Error cargando Google Translate');
			};
			
			// Agregar el script al head
			document.head.appendChild(script);
		})();
	</script>
</header>